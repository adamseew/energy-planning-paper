%MAIN.M% Simulation of the Energy-Aware Dynamic Mission Planning Algorithm%% Energy sim, input data% Hint: use default values (just press enter when asked anything and don't % input any file)% Hint: always good idea to start with a clear commanddisp('[1] Energy sim');disp('  [a] Input data');% Fourier series order (see eq:fourier)r = input('  [>] Fourier series order r: ');if isempty(r)    r = 3; % default orderend% Characteristic timexi = input('  [>] Characteristic time xi: ');if isempty(xi)    xi = 10; % Characterictic timeend% The value of y from the sensor. This is the former mechanical energy; the% former computational energy [i.e., the energy from the embedded% companion is obtained from the modeling tool's csv file].disp('  [>] Input sensor energy data [csv]');[bn, folder] = uigetfile('.csv');if bn == 0    % default: data from the paparazzi simulation on 12/12/18 09:53:01    % credit: Amit Ferencz Appel    file = csvread('../data/simulation1/pprz_energy.csv');else    file = csvread(fullfile([folder, bn]));endif bn == 0    column = 1; % default columnelse    column = input('  [>] Which column contains energy: ');end    file = file(:, [column]);if bn == 0    ts = 200; % default time stepelse     ts = input('  [>] At what time step [ms]: ');endts = ts / 1000;tf = ts * size(file, 1); % leaving here just for exemplificationt = 1:1:size(file, 1); % discretizing, use ts to get the originalmeas = file;clear column file tf;% The value of the model from the modeling tool (powprof); former% computational energy.disp('  [>] Input computational energy data (from powprof) [csv]');[bn, folder] = uigetfile('.csv');if bn == 0    file2 = csvread('../data/simulation1/computational_energy.csv');else    file2 = csvread(fullfile([folder, bn]));end% Mission specificationdisp('  [>] Input mission specification [csv]')[bn, folder] = uigetfile('.csv');if bn == 0    file3 = csvread('../data/simulation1/mission_specification.csv');else    file3 = csvread(fullfile([folder, bn]));endclear bn folder;%% Energy sim, OP1% Non animated simulation / fixed case: with no TEEs controls, and the % highest possible QoS controls at each time stepOP1;disp('[1.1]');disp('  [d] Plot of the results');disp('  [!] Dependecies: y, meas, gck, ts');figure;plot(t * ts, meas + gck);hold on;plot(t * ts, y);hold off;legend('data', 'observer');%% Energy sim, OP2% Animated simulation rest same as OP1OP1;disp('[1.2]');disp('  [d] Animate the results');disp('  [!] Dependecies: y, meas, gck, ts');figure;for i=t    plot(t(1:i) * ts, meas(1:i) + gck(1:i));    hold on;    plot(t(1:i) * ts, y(1:i));    hold off;        legend('data', 'observer');        pause(ts);end